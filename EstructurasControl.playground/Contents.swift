/*:
# Estructuras de control: Condicionales y Ciclos ü¶Ü
 
 Escrito por: Samuel Arturo Garrido S√°nchez
 
Las estructuras de control son elementos presentes en muchos lenguajes de programaci√≥n y swift no es la excepci√≥n. Desde que aprendes If/else, switch case, for, while, etc, en otros lenguajes como Java, solamente podr√°s encontrar equivalentes en otros lenguajes. Nos permiten controlar el flujo de ejecuciones dentro de nuestro c√≥digo para que se ejecute lo que queramos, en el momento que le indiquemos.
 
 
 ## Condicionales
 Los condicionales son elementos que nos permiten decir una pregunta con opci√≥n a verdadero/falso en cada pregunta, y realizando una serie de acciones en cada condici√≥n.
 
*/

//Un condicional if b√°sico se declara como:

let numero:Int = 1

if numero<3{
    print("El n√∫mero es menor a 3")
}else{
    print("El n√∫mero es mayor o igual a 3")
}

//Donde la acci√≥n corresponde a una comparaci√≥n, si cumple la condici√≥n realizar√° la acci√≥n contenida dentro del if, en caso contrario realizar√° otra u otras acciones


//OPERADORES L√ìGICOS

//Los operadores l√≥gicos en Swift correspoden a:

/*
 Para poder colocar los condicionales siguientes lo haremos mediante la siguiente nomenclatura:
 
 NOT :    !a
 AND :  a && b
 OR  :  a¬†|| b
 
*/


//EJEMPLO NOT
//Entra a la condici√≥n si es falso el falso, o sea verdadero. Podemos realizar un ejemplo con un acceso a un sistema

let accesoEntrada: Bool = false

if !accesoEntrada{
    print("ACCESO DENEGADO")
}else{
    print("ACCESO CORRECTO")
}

//EJEMPLO AND
//Entra a la condici√≥n si ambas condiciones son verdaderas, en caso que una o las 2 sean falsas no realizar√° las acciones dentro del if

let codigoPuertaCorrecto = true
let huellaDactilarAceptada = true

if codigoPuertaCorrecto && huellaDactilarAceptada{
    print("Bienvenido al sistema bancario")
}else{
    print("SEGURIDAD! üëÆ‚Äç‚ôÇÔ∏è")
}


//Puede llenarse de condiciones y hasta el momento que TODAS sean verdaderas, realizar√° el conjunto de acciones contenidas en el condicional


if codigoPuertaCorrecto && huellaDactilarAceptada && 5<10 && 10==10{
    print("Todas las condiciones se cumplieron")
}else{
    print("Alguna de las condiciones no se cumpli√≥")
}


//Ejemplo OR
//Entra a la condici√≥n si ALGUNO de los elementos es verdadero. Con que uno se cumpla entrar√° a la condici√≥n.

let invitacionInvitado = true
let invitacionAcompa√±ante = false

if invitacionInvitado || invitacionAcompa√±ante {
    print("Pueden pasar a la peda")
}else{
    print("Nel pastel")
}



//S√≠, se pueden combiar √©stos, para ello necesitamos par√©ntesis como en las operaciones matem√°ticas:6*5+(1*(7+5)) = 42 ¬øQu√© haces primero?

let tengoLlave:Bool = true

if (codigoPuertaCorrecto && huellaDactilarAceptada) || tengoLlave {
    print("Puedo entrar a mi casa")
}else{
    print("No puedo entrar a mi casa")
}



/*:
 Switch CASE:
 Switch case es una versi√≥n mejorada de un condicional normal, es un condicional m√∫ltiple que va checando las posibilidades que se le establezcan y para cada posible condici√≥n podemos realizar diversas funciones.
*/


let unNumero:Int = 10

switch unNumero {
    case 1:
        print("Tenemos un n√∫mero 1")
    case 2:
        print("Tenemos un n√∫mero 2")
    case 10:
        print("Tenemos un n√∫mero 10")
    default:
        print("Ninguno de los casos")
}

//N√≥tese los que han tenido otro lenguaje de programaci√≥n en sus manos, no tenemos un break al final de los elementos, permitiendo as√≠ un c√≥digo m√°s seguro porque switch detendr√° la b√∫squeda de elementos cuando tenga la primer coincidencia.

//En caso que queramos una sitaxis tipo C o java donde queremos m√∫ltiples casos sean matcheados en el mismo switch case, existe una palabra: **fallthrough** que nos permite mantenernos en el switch sin hacer el break.

let describirEntero = 5

var descripcionDeEntero = "El n√∫mero \(describirEntero) es "

switch describirEntero{
    case 2,3,5,7,11,13,17,19:
        descripcionDeEntero += "un n√∫mero primo"
        fallthrough
    default:
        descripcionDeEntero += "un entero."
}

//Puede ser usado tambi√©n para capturar letras:

let caracter: Character = "a"

switch caracter {
case "a","A":
    print("Tenemos una a (puede ser may√∫scula, contempla ambos casos)")
default:
    print("No sabemos qu√© tenemos")
}


//Podemos agregar contadores o rangos tambi√©n a nuestro switch case:

let nosFaltan = 143
let cantidad:String

switch nosFaltan {
case 0:
    cantidad = "ning√∫n"
case 1..<5:
    cantidad = "muy pocos"
    
case 5...12:
    cantidad = "pocos"
case 13...40:
    cantidad = "algunos"
case 40...50:
    cantidad = "considerables"
case 50...100:
    cantidad = "chiorro"
case _ where nosFaltan > 100:
    cantidad = "(inserte su groser√≠a mexicana favorita)"
default:
    cantidad = ", no s√© cu√°ntos "
}
print("Nos faltan \(cantidad) lugares")



/*:
## CICLOS üåÄ
 Los ciclos son elementos que nos permiten repetir ciertas acciones hasta que la condici√≥n que se le establezca se cumpla. Nos permite, entre otras cosas, recorrer un arreglo, cargar im√°genes y m√°s adelante cargar elementos a una tabla como de mensajes de WhatsApp.
 
 Podemos encontrar ciclos **For, while y repeat while**
 
 
 ### FOR
 
 Nos permitir√° repetir una acci√≥n dadas las condiciones que le indiquemos.
*/

//Un ciclo for puede ser usado con los siguientes casos:


//Si damos un rango de un √≠ndice desde d√≥nde comienza hasta d√≥nde termina, realizar√° una cuenta de 1 en 1 hasta llegar al l√≠mite.

var tarea1: Int = 2
var tarea2: Int = 3
var tarea3: Int = 4
var tarea4: Int = 5

for indice in 1...10{
    print("\(indice) ")
    
    tarea1 += indice
    tarea2 -= indice
    tarea3 *= indice
    tarea4 /= indice
    
}

print("Averigua por qu√© tarea1 es \(tarea1).")
print("Averigua por qu√© tarea2 es \(tarea2).")
print("Averigua por qu√© tarea3 es \(tarea3).")
print("Averigua por qu√© tarea4 es \(tarea4).")


// VEN EL \(indice)? Eso se le dice concatenar y nos referimos a poder unir elementos de varios tipos, en este caso √≠ndice son de tipo entero a imprimirlos como String, podemos igual realizarlo con varios tipos de elementos, colocando el nobre de la variable entre par√©ntesis y antecedido por una antidiagonal:     \(variable).


//Operador de rango medio abierto: Define un rango que corre de "a" a "b" pero no incluye a "b". O sea no inclu√≠mos a 10

print("\n Operador de rango medio: ")

for rangoMedio in 0..<10{
    print(" \(rangoMedio) ")
}


//Rangos de un lado: Puedes recorrer un arreglo en un ciclo for dando un rango, en este caso names contiene 3 elementos, el 0, el 1 y el 2, y solo queremos los elementos 1 y 2.

let names:[String] = ["Samuel","Jorge","Rodrigo","Ricardo","Giovanni","Alfonso","Derek"]

print("\n De lado izquierdo: \n")
for nombre in names[1...]{
    print(nombre)
}

print("\n De lado derecho: \n")
for nombre in names[...4]{
    print(nombre)
}

print("\n De ambos lados: \n")
for nombre in names[1...4]{
    print(nombre)
}

//Impresi√≥n de diccionarios mediante FOR: Podemos imprimir el contenido de un diccionario con su llave mediante el siguiente ciclo for:

let animalesyNumPatas = ["ara√±a":8,"hormiga":6,"gato":4,"cienpi√©s":100,"babosa":0]

for (nombreAnimal,numeroPatas) in animalesyNumPatas{
    print("El o La \(nombreAnimal) tiene \(numeroPatas) patas")
}


// Si solamente necesitamos recorrer y la variable no nos es √∫til, podemos omitirla con un gui√≥n bajo: _

var base = 2
var potencia = 5
var respuesta = 1

for _ in 1...potencia{
    respuesta *= base
}


// Si queremos determinar de cu√°nto en cu√°nto vaya recorriendo, adem√°s de los l√≠mites, tendremos que utilizar la sentencia completa:


let inicio = 1
let fin = 10

for contador in stride(from: inicio, to: fin, by: 2){
    print(contador) // 1 3 5 7 9
}

//En este paso definimos el inicio que es 1, sumar√° 2 e imprimir√° el siguiente valor hasta que llegue a fin, 10. No se pasar√° del rango por lo que 11 no lo imprimir√° al sumar a 9 + 2 = 11

/*:
 ### WHILE
Nos permite repetir una serie de comandos hasta que la condici√≥n colocada en el while sea falsa.
*/
//La estructura general de un while es:

var contador = 10
while contador>0{
    print(contador)
    contador-=1
}

//Las mismas opciones que ten√≠amos anteriormente como compuertas l√≥gicas AND, NOT y OR aplican:

contador = 10
while huellaDactilarAceptada &&  contador>0{
    print("Huella aceptada en \(contador)")
    contador-=1
}
//La diferencia que salta a la vista del repeat while es que **la funci√≥n a repetir al menos se ejecuta una vez**. Al contrario de while donde si no cumple la condici√≥n, ni entrar√≠a a repetir el conjunto de instrucciones. Simulemos pasar de nivel en un videojuego.


var nivelActual:Int = 0, nivelFinal:Int = 5

let nivelCompletado = true //Si el nivel est√° completado, pasado.

repeat {
    if nivelCompletado {
        print("Has pasado el nivel \(nivelActual)")
        nivelActual += 1
    }
} while (nivelActual <= nivelFinal)

print("Has terminado el videojuego")


//Al menos una vez repetir√° el conjunto de instrucciones dentro de repeat.

/*:
 ## TAREA
 
Con ayuda dentro del cap√≠tulo de **Control Flow** en el libro: "The Swift Programming Language", crear un algoritmo que, dada una coordenada (1,1), por ejemplo, determinar si est√° contenida dentro del cuadro central de -2 a 2 tanto en x como en y, si est√° en el origen o en alguno de los ejes.

*Puedes tomar ayuda de √©sto, pero no te lo recomiendo, ya que no practicar√°s tu l√≥gica computacional y eso no solo se aplica en Swift, sino en todo. Si tienes buena l√≥gica, lo dem√°s es pan comido.*
 
*/

let unPunto = (1,1)

switch unPunto{
    case (0,_):
        print("\(unPunto) est√° en el eje de las y")
    default:
        print("El punto \(unPunto) est√° fuera de del cuadrado")


}


